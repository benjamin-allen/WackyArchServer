/* TUTORIAL 0
insert into AlphaChallenges (Flag, PredecessorId, Description, InputTextJson, OutputTextJson, Category, Name, [Order])
values ('FLAG{LetS_G0}', null, 'Hey kid, welcome to the O-77 Emulator. You can write code in the center box, and use the controls below that to run it.
Each of the challenges in this layout will give you a set of input ports (on the left) and a set of output ports (on the right). Your goal is to use the contents of the input ports to write all of the data that the output ports expect.

For this first challenge, simply write the contents of INPUT to OUTPUT. You can read the data from INPUT with the instruction ''READ R0 INPUT''. See your manual for how to write data.
Once you''ve passed the test locally, go ahead and click ''Submit'' to run the tests on the server side. These include some additional tests that are used to make sure that your program is really working.',
'[{"Name":"INPUT", "Data":[256]}]', '[{"Name":"OUTPUT", "Data":[256]}]', 'Introduction', 'Intro 0 - Welcome!', 0);

insert into AlphaChallengeTests (AlphaChallengeId, InputTextJson, OutputTextJson)
values ((select Id from AlphaChallenges where Name = 'Intro 0 - Welcome!'), '[{"Name":"INPUT", "Data":[-263]}]', '[{"Name":"OUTPUT", "Data":[-263]}]'),
((select Id from AlphaChallenges where Name = 'Intro 0 - Welcome!'), '[{"Name":"INPUT", "Data":[1700]}]', '[{"Name":"OUTPUT", "Data":[1700]}]'),
((select Id from AlphaChallenges where Name = 'Intro 0 - Welcome!'), '[{"Name":"INPUT", "Data":[-1152]}]', '[{"Name":"OUTPUT", "Data":[-1152]}]'),
((select Id from AlphaChallenges where Name = 'Intro 0 - Welcome!'), '[{"Name":"INPUT", "Data":[0]}]', '[{"Name":"OUTPUT", "Data":[0]}]');
*/

/*
insert into AlphaChallenges (Flag, PredecessorId, Description, InputTextJson, OutputTextJson, Category, Name, [Order])
values ('FLAG{R3L1V3_F1RS7_GR4D3}', (select Id from AlphaChallenges where Name = 'Intro 0 - Welcome!'), 'The O-77/e machine is useful for more than just data piping.
Use it to modify signals from your inputs by ADDing, SUBtracting, MULtiplying, and DIViding the numbers in the LEFT and RIGHT pipes.
For example, ADD R0 R1 will set R0 = R0 + R1.',
'[{"Name":"RIGHT", "Data":[8,29,3,10]}, {"Name": "LEFT", "Data":[7,38,8,1010]}]', '[{"Name":"MATH", "Data":[15,9,24,101]}]', 'Introduction', 'Intro 1 - Arithmetic!', 1);

insert into AlphaChallengeTests (AlphaChallengeId, InputTextJson, OutputTextJson)
values ((select Id from AlphaChallenges where Name = 'Intro 1 - Arithmetic!'), '[{"Name":"RIGHT", "Data":[8,29,3,10]}, {"Name": "LEFT", "Data":[7,38,8,1010]}]', '[{"Name":"MATH", "Data":[15,9,24,101]}]'),
((select Id from AlphaChallenges where Name = 'Intro 1 - Arithmetic!'), '[{"Name":"RIGHT", "Data":[-10,90,43,11]}, {"Name": "LEFT", "Data":[-10,400,-1,121]}]', '[{"Name":"MATH", "Data":[-20,310,-43,11]}]'),
((select Id from AlphaChallenges where Name = 'Intro 1 - Arithmetic!'), '[{"Name":"RIGHT", "Data":[1,1,1,1]}, {"Name": "LEFT", "Data":[1,1,1,1]}]', '[{"Name":"MATH", "Data":[2,0,1,1]}]'),
((select Id from AlphaChallenges where Name = 'Intro 1 - Arithmetic!'), '[{"Name":"RIGHT", "Data":[-1,-1,-1,-1]}, {"Name": "LEFT", "Data":[-1,-1,-1,-1]}]', '[{"Name":"MATH", "Data":[-2,0,1,1]}]'),
((select Id from AlphaChallenges where Name = 'Intro 1 - Arithmetic!'), '[{"Name":"RIGHT", "Data":[2000,2047,-128,2]}, {"Name": "LEFT", "Data":[2000,-2,-128,3]}]', '[{"Name":"MATH", "Data":[-96,2047,0,1]}]')
*/

/*
insert into AlphaChallenges (Flag, PredecessorId, Description, InputTextJson, OutputTextJson, Category, Name, [Order])
values ('FLAG{hey!_race_ya!}', (select Id from AlphaChallenges where Name = 'Intro 1 - Arithmetic!'), 'The O-77/e provides native support for simple bitwise operations, as well as the ability to swap or copy the contents of registers. See the manual for details.

For this task, read A, B, and C from the labeled input ports. The output A AND B AND C, A OR B OR C, A XOR B XOR C, and then NOT A, NOT B, NOT C. Finally, output A shifted left by 2 places and shifted right by 3 places.',
'[{"Name":"C", "Data":[337]}, {"Name": "B", "Data":[961]}, {"Name": "A", "Data":[427]}]', '[{"Name": "BITS", "Data":[257,1019,827,-428,-962,-338,1708,53]}]','Introduction', 'Intro 2 - Bits!', 2)

insert into AlphaChallengeTests (AlphaChallengeId, InputTextJson, OutputTextJson)
values ((select Id from AlphaChallenges where Name = 'Intro 2 - Bits!'), '[{"Name":"C", "Data":[337]}, {"Name": "B", "Data":[961]}, {"Name": "A", "Data":[427]}]', '[{"Name": "BITS", "Data":[257,1019,827,-428,-962,-338,1708,53]}]'),
((select Id from AlphaChallenges where Name = 'Intro 2 - Bits!'), '[{"Name":"C", "Data":[803]}, {"Name": "B", "Data":[963]}, {"Name": "A", "Data":[142]}]', '[{"Name": "BITS", "Data":[2,1007,110,-143,-964,-804,568,17]}]'),
((select Id from AlphaChallenges where Name = 'Intro 2 - Bits!'), '[{"Name":"C", "Data":[18]}, {"Name": "B", "Data":[0]}, {"Name": "A", "Data":[3]}]', '[{"Name": "BITS", "Data":[0,19,17,-4,-1,-19,12,0]}]'),
((select Id from AlphaChallenges where Name = 'Intro 2 - Bits!'), '[{"Name":"C", "Data":[0]}, {"Name": "B", "Data":[0]}, {"Name": "A", "Data":[0]}]', '[{"Name": "BITS", "Data":[0,0,0,-1,-1,-1,0,0]}]')
*/

/*
insert into AlphaChallenges (Flag, PredecessorId, Description, InputTextJson, OutputTextJson, Category, Name, [Order])
values ('FLAG{why_are_we_jumping_I_thought_this_was_about_roller_coaster_loops}', (select Id from AlphaChallenges where Name = 'Intro 2 - Bits!'), 'The O-77/e machine provides several forms of instructions for flow control. JMP is the simplest.
You can add a label in your code by beginning the line with an @ symbol. You can reference that label in a jump instruction, like ''JMP @label''. This will unconditionally set the instruction after ''@label'' to be executed next.

Use this to implement an infinite loop that adds each number in INPUT to an accumulator and then outputs the result of each addition to OUTPUT.
For example, if INPUT has the values [1, 20, 9], then OUTPUT should receive the values [1, 21, 30].',
'[{"Name":"INPUT", "Data":[6, -5, 8, -4, 9, -1, 5, 9, -6, -10, 7, 3, -10, 10, 0, -7, -2, 0, -4, -2, 0, -9, -4, 3, 10, 8, -6, 5, -3, 10, -8, 2, 7, 3, -3, -9, 8, -4, -9, -4, -5, 4, -3, -3, 6, 7, 8, 0, -6, 3, 2, -6, 2, -4, 3, 3, 9, -3, 9, -6, -9, 8, -2, 8, -9, -4, 3, -3, 1, 10, -6, 7, 2, 8, 7, 2, -8, -10, 9, -4, 8, -3, -8, 7, -8, 5, -4, -6, -4, 2, 4, -6, -10, -7, -9, -9, 0, 8, 7]}]',
'[{"Name":"OUTPUT", "Data":[6, 1, 9, 5, 14, 13, 18, 27, 21, 11, 18, 21, 11, 21, 21, 14, 12, 12, 8, 6, 6, -3, -7, -4, 6, 14, 8, 13, 10, 20, 12, 14, 21, 24, 21, 12, 20, 16, 7, 3, -2, 2, -1, -4, 2, 9, 17, 17, 11, 14, 16, 10, 12, 8, 11, 14, 23, 20, 29, 23, 14, 22, 20, 28, 19, 15, 18, 15, 16, 26, 20, 27, 29, 37, 44, 46, 38, 28, 37, 33, 41, 38, 30, 37, 29, 34, 30, 24, 20, 22, 26, 20, 10, 3, -6, -15, -15, -7, 0]}]',
'Introduction', 'Intro 3 - Loopz', 3);

insert into AlphaChallengeTests (AlphaChallengeId, InputTextJson, OutputTextJson)
values ((select Id from AlphaChallenges where Name = 'Intro 3 - Loopz'), '[{"Name":"INPUT", "Data":[1, -6, 3, -4, -1, 4, 7, 0, 8, -1, 1, 10, -2, 5, -3, -4, -8, 9, -10, 10, -10, 8, 10, 4, -10, -10, -4, 2, -7, 3, 4, 0, 9, -9, 1, -4, 8, 3, 5, -7, 3, 4, 4, -8, -5, -1, -1, 1, -3, 7, -2, 4, -5, -3, 9, 8, 9, -9, -10, 1, 6, 3, 6, 10, 9, 0, 3, -4, 10, 10, -9, 8, -7, -8, -1, -5, 9, -5, 0, 4, 4, -10, -8, -2, 3, -7, -10, 2, -9, 5, -4, 5, -5, 8, -9, 3, 6, 6, -7, -7, -4, 3, -4, -6, 7, -8, -8, -10, 1, -4, 9, 1, 3, 2, -9, 2, -6, -4, 8, -2, 2, -8, 4, -3, -8, -3, -4, -4, -5, -4, -10, 9, 3, -7, -9, -2, -4, 10, -1, -1, 0, -5, 9, -8, -10, 1, -3, 3, -7, 3, -2, -8, 9, 7, 2, 4, -10, -10, 8, -2, -10, -3, -2, -1, 8, -2, -5, -8, -7, 0, 5, -2, -8, 4, 6, -4, 7, 8, -7, 8, 3, 2, 9, -3, 6, -1, 10, 0, 0, -8, 6, 8, -4, -4, -8, -3, 5, -8, -5, 4, 2, 2, 1, 9, 10, 4, 9, -9, -4, -1, 7, 5, -3, 7, 1, -9, -6, 1, -7, 3, 3, 10, -5, 5, -2, 7, -10, -4, -4, 3, 8, 4, 6, 1, 3, -6, -7, -7, -8, -9, 7, -2, -4, 4, -5, 10, 8, -4, -10, 8, -1, -6, -3, -3, 6, 10, -1, 8, 9, -10, 9, 9, 9, -3, 5, -4, -1, -4, -5, -7, -4, -6, -9, -2, -7, -7, -3, -6, -4, 3, -10, 4, 1, -8, -2, 9, 3, -5, -8, -5, -9, -4, 7, 1, 2, -6, -6, -4, -9, -5, 2, 4, 6, 9, 9, 10, -1, 1, 7, -10, 7, -5, 10, 4, 4, -7, 4, 9, -6, -1, 6, 9, -1, 9, -3, -3, -1, 0, 2, -8, 2, 6, -2, -2, -4, -7, -2, 4, 5, 0, 5, 7, -7, -4, 8, -10, -6, 9, -3, -4, -2, -8, 3, 5, -8, -1, -8, -8, -4, -3, -7, -10, 9, 8, -2, 7, -9, 1, 9, 2, -10, 0, -3, -7, -3, 2, 9, 2, 3, -7, 3, 6, -10, -4, -10, -1, -6, -2, 9, -10, -8, -3, -8, -4, -7, 1, -8, -1, 10, 4, 7, -4, 7, 9, 9, -2, 4, -4, -2, -6, -5, -10, 0, -6, -3, 3, -1, -6, 3, -5, -7, -8, -9, 6, 1, 5, -3, -6, 10, -8, 3, 3, -7, -8, -8, 8, 0, -3, 9, 9, 3, 2, 10, -5, -6, -8, -6, -4, -2, 1, -7, -9, -6, 10, 3, 0, 7, -3, -9, -4, 5, 7, 2, -2, -8, -6, 2, 6, 3, -2, 4, 3, -8, -7, -10, 9, 2, 2, 4, 8, -9, 1, -7, 10, 0, -9, -10, 7, 10, 7, -8, -10, -2, 1, -8, 5, -7, 6, 6, -3, -5, -5, -4, -2, -4, -2, -3, -8, 5, -5, 1, 1, 10, 1, -5, 6, -5, 7, -4, -7, -5, 7, -3, 3, -9, 4, 1, -8, 9, -5, -8, 1, -10, -10, 5, 4, 3, -8, 7, -2, 3, 6, -7, 6, -1, 4, -10, 10, 6, 3, -1, 1, 7, -8, -7, 10, 5, 0, -2, -6, 0, -2, -4, 2, -9, 8, -1, -2, 3, 4, -4, 5, -5, -1, -9, -9, 10, -8, 1, 2, 9, 7, -1, 7, 7, 8, 5, 9, 9, 5, 10, 10, -1, 10, -7, 9, 3, 4, 7, 9, -9, 6, -10, 1, -5, -1, 5, 2, 10, 9, -7, -4, -4, -6, -9, -8, -3, 8, 1, 9, 9, -1, 7, -6, -3, 5, 1, -8, -6, 3, -2, 10, 4, 2, 3, -10, 0, 4, -3, -10, 7, -5, 5, -6, 3, 1, -8, -5, 9, -6, -2, 3, 5, 3, -1, -6, 8, -9, 6, -2, 0, -10, -8, -7, -9, 4, 10, 0, 8, 1, 4, -8, 8, -8, -8, 1, -8, -5, 2, 9, -2, 1, -4, 6, 2, 7, -4, -10, 7, 3, -7, -2, 0, -1, -4, -9, 5, -6, -6, 3, -9, 8, 10, 5, 2, -5, -8, -2, 3, -8, 9, 9, 3, 3, -6, -8, -5, -8, -4, -5, 10, -2, 6, 2, 0, 2, -6, -2, 8, -9, 2, 2, -3, 3, 2, -4, -9, 6, 0, 8, -10, 6, 4, -4, 9, -2, 2, -3, -7, 2, 7, -6, -10, 8, -7, 0, -4, 3, -2, -5, -1, -3, 4, 0, -9, -4, -10, 8, 10, -9, 3, 5, 3, -1, -7, -3, -6, 6, -2, -6, 4, -10, 6, 8, -4, 10, 10, -7, -10, -2, -7, 6, 2, 8, -2, -5, 8, -7, 9, -8, -4, -9, -10, 0, 2, -7, 5, 1, -4, -9, -9, 9, 5, -1, -2, -7, 9, 9, -3, 7, -7, 8, -4, -10, -1, -10, -10, 4, 5, -3, 9, -7, -10, 7, 8, 9, -4, -5, 4, -6, 0, 6, 6, -9, 3, -7, 0, 1, 9, 4, -6, 10, -5, 1, 3, 0, 0, 7, -3, -4, 2, -9, -8, 5, 1, 8, 4, -3, -3, 7, -8, 9, -4, -6, 2, -1, -6, 5, 4, -7, 3, 5, 10, -3, 5, -2, -3, 6, -7, -6, -8, -1, -2, 9, 9, -2, -9, -3, 5, 6, 0, 9, 8, 9, 0, -8, 4, -7, -6, 2, 8, 9, 2, 7, -5, 7, -8, 7, 7, -10, -10, -1, -10, 8, 10, -10, 3, -8, -10, -1, -5, -6, -5, -4, 5, 3, 1, -7, 7, -4, -1, -6, -7, 6, -1, 5, -3, 2, 9, -8, -5, -8, -2, -1, 0, 9, 2, -6, 8, -10, -1, 6, -6, 4, -1, 3, -9, 8, 4, 7, 9, -1, -10, -10, 8, 10, 0, -7, -6, 0, -2, 0, 5, -4, -6, -9, 5, 4, -8, -2, 8, 4, 4, 3, -2, 10, -3, 6, 7]}]', '[{"Name":"OUTPUT", "Data":[1, -5, -2, -6, -7, -3, 4, 4, 12, 11, 12, 22, 20, 25, 22, 18, 10, 19, 9, 19, 9, 17, 27, 31, 21, 11, 7, 9, 2, 5, 9, 9, 18, 9, 10, 6, 14, 17, 22, 15, 18, 22, 26, 18, 13, 12, 11, 12, 9, 16, 14, 18, 13, 10, 19, 27, 36, 27, 17, 18, 24, 27, 33, 43, 52, 52, 55, 51, 61, 71, 62, 70, 63, 55, 54, 49, 58, 53, 53, 57, 61, 51, 43, 41, 44, 37, 27, 29, 20, 25, 21, 26, 21, 29, 20, 23, 29, 35, 28, 21, 17, 20, 16, 10, 17, 9, 1, -9, -8, -12, -3, -2, 1, 3, -6, -4, -10, -14, -6, -8, -6, -14, -10, -13, -21, -24, -28, -32, -37, -41, -51, -42, -39, -46, -55, -57, -61, -51, -52, -53, -53, -58, -49, -57, -67, -66, -69, -66, -73, -70, -72, -80, -71, -64, -62, -58, -68, -78, -70, -72, -82, -85, -87, -88, -80, -82, -87, -95, -102, -102, -97, -99, -107, -103, -97, -101, -94, -86, -93, -85, -82, -80, -71, -74, -68, -69, -59, -59, -59, -67, -61, -53, -57, -61, -69, -72, -67, -75, -80, -76, -74, -72, -71, -62, -52, -48, -39, -48, -52, -53, -46, -41, -44, -37, -36, -45, -51, -50, -57, -54, -51, -41, -46, -41, -43, -36, -46, -50, -54, -51, -43, -39, -33, -32, -29, -35, -42, -49, -57, -66, -59, -61, -65, -61, -66, -56, -48, -52, -62, -54, -55, -61, -64, -67, -61, -51, -52, -44, -35, -45, -36, -27, -18, -21, -16, -20, -21, -25, -30, -37, -41, -47, -56, -58, -65, -72, -75, -81, -85, -82, -92, -88, -87, -95, -97, -88, -85, -90, -98, -103, -112, -116, -109, -108, -106, -112, -118, -122, -131, -136, -134, -130, -124, -115, -106, -96, -97, -96, -89, -99, -92, -97, -87, -83, -79, -86, -82, -73, -79, -80, -74, -65, -66, -57, -60, -63, -64, -64, -62, -70, -68, -62, -64, -66, -70, -77, -79, -75, -70, -70, -65, -58, -65, -69, -61, -71, -77, -68, -71, -75, -77, -85, -82, -77, -85, -86, -94, -102, -106, -109, -116, -126, -117, -109, -111, -104, -113, -112, -103, -101, -111, -111, -114, -121, -124, -122, -113, -111, -108, -115, -112, -106, -116, -120, -130, -131, -137, -139, -130, -140, -148, -151, -159, -163, -170, -169, -177, -178, -168, -164, -157, -161, -154, -145, -136, -138, -134, -138, -140, -146, -151, -161, -161, -167, -170, -167, -168, -174, -171, -176, -183, -191, -200, -194, -193, -188, -191, -197, -187, -195, -192, -189, -196, -204, -212, -204, -204, -207, -198, -189, -186, -184, -174, -179, -185, -193, -199, -203, -205, -204, -211, -220, -226, -216, -213, -213, -206, -209, -218, -222, -217, -210, -208, -210, -218, -224, -222, -216, -213, -215, -211, -208, -216, -223, -233, -224, -222, -220, -216, -208, -217, -216, -223, -213, -213, -222, -232, -225, -215, -208, -216, -226, -228, -227, -235, -230, -237, -231, -225, -228, -233, -238, -242, -244, -248, -250, -253, -261, -256, -261, -260, -259, -249, -248, -253, -247, -252, -245, -249, -256, -261, -254, -257, -254, -263, -259, -258, -266, -257, -262, -270, -269, -279, -289, -284, -280, -277, -285, -278, -280, -277, -271, -278, -272, -273, -269, -279, -269, -263, -260, -261, -260, -253, -261, -268, -258, -253, -253, -255, -261, -261, -263, -267, -265, -274, -266, -267, -269, -266, -262, -266, -261, -266, -267, -276, -285, -275, -283, -282, -280, -271, -264, -265, -258, -251, -243, -238, -229, -220, -215, -205, -195, -196, -186, -193, -184, -181, -177, -170, -161, -170, -164, -174, -173, -178, -179, -174, -172, -162, -153, -160, -164, -168, -174, -183, -191, -194, -186, -185, -176, -167, -168, -161, -167, -170, -165, -164, -172, -178, -175, -177, -167, -163, -161, -158, -168, -168, -164, -167, -177, -170, -175, -170, -176, -173, -172, -180, -185, -176, -182, -184, -181, -176, -173, -174, -180, -172, -181, -175, -177, -177, -187, -195, -202, -211, -207, -197, -197, -189, -188, -184, -192, -184, -192, -200, -199, -207, -212, -210, -201, -203, -202, -206, -200, -198, -191, -195, -205, -198, -195, -202, -204, -204, -205, -209, -218, -213, -219, -225, -222, -231, -223, -213, -208, -206, -211, -219, -221, -218, -226, -217, -208, -205, -202, -208, -216, -221, -229, -233, -238, -228, -230, -224, -222, -222, -220, -226, -228, -220, -229, -227, -225, -228, -225, -223, -227, -236, -230, -230, -222, -232, -226, -222, -226, -217, -219, -217, -220, -227, -225, -218, -224, -234, -226, -233, -233, -237, -234, -236, -241, -242, -245, -241, -241, -250, -254, -264, -256, -246, -255, -252, -247, -244, -245, -252, -255, -261, -255, -257, -263, -259, -269, -263, -255, -259, -249, -239, -246, -256, -258, -265, -259, -257, -249, -251, -256, -248, -255, -246, -254, -258, -267, -277, -277, -275, -282, -277, -276, -280, -289, -298, -289, -284, -285, -287, -294, -285, -276, -279, -272, -279, -271, -275, -285, -286, -296, -306, -302, -297, -300, -291, -298, -308, -301, -293, -284, -288, -293, -289, -295, -295, -289, -283, -292, -289, -296, -296, -295, -286, -282, -288, -278, -283, -282, -279, -279, -279, -272, -275, -279, -277, -286, -294, -289, -288, -280, -276, -279, -282, -275, -283, -274, -278, -284, -282, -283, -289, -284, -280, -287, -284, -279, -269, -272, -267, -269, -272, -266, -273, -279, -287, -288, -290, -281, -272, -274, -283, -286, -281, -275, -275, -266, -258, -249, -249, -257, -253, -260, -266, -264, -256, -247, -245, -238, -243, -236, -244, -237, -230, -240, -250, -251, -261, -253, -243, -253, -250, -258, -268, -269, -274, -280, -285, -289, -284, -281, -280, -287, -280, -284, -285, -291, -298, -292, -293, -288, -291, -289, -280, -288, -293, -301, -303, -304, -304, -295, -293, -299, -291, -301, -302, -296, -302, -298, -299, -296, -305, -297, -293, -286, -277, -278, -288, -298, -290, -280, -280, -287, -293, -293, -295, -295, -290, -294, -300, -309, -304, -300, -308, -310, -302, -298, -294, -291, -293, -283, -286, -280, -273]}]'),
((select Id from AlphaChallenges where Name = 'Intro 3 - Loopz'), '[{"Name":"INPUT", "Data":[6, -5, 5, 1, -10, -1, -4, 4, -4]}]', '[{"Name":"OUTPUT", "Data":[6, 1, 6, 7, -3, -4, -8, -4, -8]}]'),
((select Id from AlphaChallenges where Name = 'Intro 3 - Loopz'), '[{"Name":"INPUT", "Data":[0, -1, 0, -1, -1, 1, 0, -1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, -1, 0, -1, 1, -1, 1, -1, 1, 0, -1, 1, 0, 0, -1, 1, -1, 1, 0, 0, 0, -1, 0, 1, 0, -1, 0, -1, 1, -1, 0, -1, 1, 0, 0, 1, -1, 0, 1, -1, 0, 0, -1, 1, 0, -1, -1, -1, 0, -1, 0, 1, 0, 1, 0, 0, 1, 0, -1, -1, 0, 0, 1, 0, 0, 0, 1, -1, 0, 0, 1, 1, -1, 0, 0, 0, 0, -1, -1, 1, 1]}]', '[{"Name":"OUTPUT", "Data":[0, -1, -1, -2, -3, -2, -2, -3, -2, -1, -1, 0, 0, 1, 1, 1, 2, 3, 4, 3, 3, 2, 3, 2, 3, 2, 3, 3, 2, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 2, 3, 3, 2, 2, 1, 2, 1, 1, 0, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 0, 1, 1, 0, -1, -2, -2, -3, -3, -2, -2, -1, -1, -1, 0, 0, -1, -2, -2, -2, -1, -1, -1, -1, 0, -1, -1, -1, 0, 1, 0, 0, 0, 0, 0, -1, -2, -1, 0]}]'),
((select Id from AlphaChallenges where Name = 'Intro 3 - Loopz'), '[{"Name":"INPUT", "Data":[0,-1]}]', '[{"Name":"OUTPUT", "Data":[0]}]')
*/

select * from AlphaChallenges order by Category, [Order]
select a.*, Name from AlphaChallengeTests a join AlphaChallenges b on b.Id = a.AlphaChallengeId order by b.Category, b.[Order]
select * from CompletedChallenges