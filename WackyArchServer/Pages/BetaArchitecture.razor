@page "/beta/{ChallengeIdString}"
@page "/beta"

@inject IJSRuntime JS
@using WackyArchServer.Model

<div id="beta-arch-container">
    <div id="beta-description">@Description</div>
    <div id="beta-arch-emulator-container">
        <div id="beta-arch-input-container">
            <div id="beta-arch-input">
                <table>
                    <tr>
                        <th>Idx</th>
                        <th class="value">Value</th>
                        <th class="actions"></th>
                    </tr>
                    @for (int i = 0; i < PreparedInput.Count; i++)
                    {
                        var j = i;
                        <tr>
                            <td>@i</td>
                            <td class="value" @onclick="(async () => await Edit(j))">0x@(new Word { Value = PreparedInput[j] }.ToHex())</td>
                            <td class="actions"><button @onclick="(async () => await Add(j))">+</button><button @onclick="(async () => await Delete(j))">-</button></td>
                        </tr>
                    }
                    <tr>
                        <td></td>
                        <td></td>
                        <td class="actions"><button @onclick="(async () => await Add(PreparedInput.Count))">+</button></td>
                    </tr>
                </table>
            </div>
            <div id="beta-arch-input-view">
                <FilledPort Port="UserInputPort"></FilledPort>
            </div>
        </div>
        <div id="beta-arch-code">
            <div class="beta-center">
                <CodeBox Disabled=@(!IsSandbox) @ref="codeBox"></CodeBox>
            </div>
            <div class="beta-center">
                <CPUInfo @ref="cpuInfo" Cpu="Cpu" ShowLoadButton="@IsSandbox" LoadButtonPressed="Load" ResetButtonPressed="Reset" StepButtonPressed="async () => await Step(true)" RunButtonPressed="Run" RunFastButtonPressed="RunFast" SubmitButtonPressed="Submit"></CPUInfo>
            </div>
        </div>
        <div id="beta-arch-memory">
            <MemoryView Cpu="Cpu" Memory="Cpu.Memory" OnMemoryChanged="MemoryChanged"></MemoryView>
            <StackView Stack="Cpu.Stack"></StackView>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string ChallengeIdString { get; set; }
    public Guid ChallengeId { get; set; }

    private string Description { get; set; } = "";

    private StackCPU Cpu { get; set; } = new();
    private List<ICyclable> cyclables = new();
    private WackyArch.Components.FilledPort UserInputPort { get; set; } = new(new List<Word>(), new Pipe(), "KP");
    private List<int> PreparedInput { get; set; } = new();

    private WackyArchServer.UIComponents.CodeBox codeBox;
    private WackyArchServer.UIComponents.CPUInfo cpuInfo;
    private bool IsSandbox = false;
    private bool IsReset = false;
    private IJSObjectReference module { get; set; }

    [Inject]
    private BetaChallengeService betaChallengeService { get; set; }
    private BetaChallenge betaChallenge { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Guid challengeId;

        UserInputPort = new WackyArch.Components.FilledPort(PreparedInput.Select(x => new Word { Value = x }).ToList(), new Pipe(), "KP");
        Cpu = new StackCPU(new Port[] { UserInputPort });
        cyclables = new List<ICyclable> { Cpu, UserInputPort };

        if (!Guid.TryParse(ChallengeIdString, out challengeId))
        {
            // Do something. Empty Arch so they have a sandbox?
            IsSandbox = true;
            Description = "This is a sandbox. You can experiment with programs here.";
        }
        else
        {
            ChallengeId = challengeId;
            var userCompletedChallenges = (await betaChallengeService.GetChallengesCompletedByUserAsync()).ToHashSet();
            var userAvailableChallenges = (await betaChallengeService.GetUncompletedAvailableBetaChallengesForUserAsync()).Select(x => x.Id).ToHashSet();
            if (userCompletedChallenges.Contains(ChallengeId) || userAvailableChallenges.Contains(ChallengeId))
            {
                IsSandbox = false;
                betaChallenge = await betaChallengeService.GetBetaChallengeAsync(ChallengeId);
                var program = betaChallengeService.GetInputProgramBinary(betaChallenge.InputProgramJson);
                Cpu.Load(program);
                await codeBox.SetText(Cpu.ProgramText);
                await codeBox.SetLinePointer(0, false);
                codeBox.SetInfoMessage("");
                Description = betaChallenge.Description;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/BetaArchitecture.razor.js");
        }    
    }

    private async Task MemoryChanged()
    {
        try
        {
            // Get binary and disassemble it
            var binary = Disassembler.ShrinkBinary(Cpu.Memory.Words.ToList());
            Cpu.Load(binary);
            Cpu.Reset();

            // Set the codebox text to the new code.
            await codeBox.SetText(Cpu.ProgramText);
            await codeBox.SetLinePointer(0, false);
            codeBox.SetInfoMessage("");
        }
        catch (AssemblerException ax)
        {
            codeBox.SetInfoMessage(ax.Message);
            await codeBox.SetLinePointer(ax.LineNumber, true);
        }
        catch (ComponentException ex)
        {
            codeBox.SetInfoMessage(ex.Message);
        }
    }

    private async Task Add(int i)
    {
        var newValue = await module.InvokeAsync<int>("editCell");
        if (newValue != 0xDEDBEEF)
        {
            PreparedInput.Insert(i, new Word { Value = newValue }.Value);
        }
    }

    private async Task Edit(int i)
    {
        var newValue = await module.InvokeAsync<int>("editCell");
        if (newValue != 0xDEDBEEF)
        {
            PreparedInput[i] = new Word {Value = newValue}.Value;
        }
    }

    private async Task Delete(int i)
    {
        PreparedInput.RemoveAt(i);
    }

    private async Task Load()
    {
        var words = Assembler.Assemble(Cpu, await codeBox.GetText(), out _);
        Cpu.Load(words);

        UserInputPort.SetLoadedData(PreparedInput.Select(x => new Word { Value = x }).ToList());
        await MemoryChanged();
    }

    private async Task Reset()
    {
        UserInputPort.SetLoadedData(PreparedInput.Select(x => new Word { Value = x }).ToList());
        cyclables.ForEach(c => c.Reset());

        await MemoryChanged();
        StateHasChanged();
        codeBox.SetInfoMessage("System Reset");
        cpuInfo.DisableSubmitButton(false);
        IsReset = true;
    }

    private async Task Step(bool callStateHasChanged=true)
    {
        IsReset = false;
        await StepWork(callStateHasChanged);
    }

    private async Task StepWork(bool callStateHasChanged=true)
    {
        try
        {
            codeBox.SetInfoMessage("");
            cyclables.ForEach(c => c.Cycle());
            if (Cpu.IsHalted)
            {
                codeBox.SetInfoMessage("Program Complete");
            }
        }
        catch (ComponentException cex)
        {
            codeBox.SetInfoMessage(cex.ShortMessage);
            Cpu.IsInterrupted = true;
            callStateHasChanged = true;
        }
        catch (Interrupt i)
        {
            switch (i.InterruptType)
            {
                case InterruptType.UNLOCK:
                    codeBox.SetInfoMessage("== Unlocked =="); cpuInfo.DisableSubmitButton(false); break;
                case InterruptType.HALT:
                    codeBox.SetInfoMessage("== Halted =="); break;
            }
            callStateHasChanged = true;
            StateHasChanged();
        }
        finally
        {
            var isInLineMap = Cpu.PcLineMap.TryGetValue(Cpu.GetPCValue(), out int currentLine);
            await codeBox.SetLinePointer(isInLineMap ? currentLine+1 : 0, Cpu.IsInterrupted);
            if (callStateHasChanged)
            {
                StateHasChanged();
            }
        }
    }

    private async Task Run(object state)
    {
        IsReset = false;
        do
        {
            await StepWork();
            await Task.Delay(1);
        } while (Cpu.IsHalted == false && Cpu.IsInterrupted == false && IsReset == false);
        if(Cpu.IsInterrupted == false)
        {
            await Reset();
        }
        StateHasChanged();
    }

    private async Task RunFast(object state)
    {
        IsReset = false;
        do
        {
            for (int i = 0; i < 36 && IsReset == false; i++)
            {
                try
                {
                    cyclables.ForEach(c => c.Cycle());
                }
                catch (ComponentException) {
                    break;
                }
                catch (Interrupt it)
                {
                    break;
                }
            }   
            await StepWork();
            await Task.Delay(1);
            StateHasChanged();
        } while (Cpu.IsHalted == false && Cpu.IsInterrupted == false && IsReset == false);
        if (Cpu.IsInterrupted == false)
        {
            await Reset();
        }
        StateHasChanged();
    }

    private async Task Submit()
    {
        await Reset();
        codeBox.SetInfoMessage("Submitted...");
        StateHasChanged();

        // Todo: gather the input from the user's input manager and sent it to the service
        var kpInput = PreparedInput.Select(x => new Word { Value = x }).ToList();
        await Task.Delay(1000);
        var result = await betaChallengeService.RunBetaChallenge(ChallengeId, kpInput);
        codeBox.SetInfoMessage(result);
        StateHasChanged();
    }
}