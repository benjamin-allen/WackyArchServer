@page "/alpha"

@using WackyArchServer.Model

<div id="alpha-challenges-container">
    @foreach(var category in ChallengesByCategory.Keys)
    {
        <div class="category-container">
            <div class="category-title">@category</div>
            <div class="category-content">
                @foreach(var challenge in ChallengesByCategory[category])
                {
                    @if (CompletedChallenges.Contains(challenge.Id))
                    {
                        
                        <a class="completed-challenge" href="/alpha/@challenge.Id">@challenge.Name</a><br />
                    }
                    else
                    {
                        <a class="uncompleted-challenge" href="/alpha/@challenge.Id">@challenge.Name</a><br />
                    }
                }
            </div>
        </div>
    }
</div>

@code {
    public Dictionary<string, List<AlphaChallenge>> ChallengesByCategory = new();
    public HashSet<Guid> CompletedChallenges = new();

    [Inject]
    private AlphaChallengeService alphaChallengeService { get; set; }

    protected async override Task OnInitializedAsync()
    {
        // Get all the user's completed Challenges
        var availableChallenges = await alphaChallengeService.GetUncompletedAvailableChallengesForUserAsync();
        var completedChallenges = await alphaChallengeService.GetChallengesCompletedByUserAsync();
        var allChallenges = new List<AlphaChallenge>().Concat(availableChallenges).Concat(completedChallenges);

        ChallengesByCategory = allChallenges.GroupBy(x => x.Category).ToDictionary(k => k.Key, v => v.OrderBy(x => x.Order).ToList());
        CompletedChallenges = completedChallenges.Select(x => x.Id).ToHashSet();
    }
}
