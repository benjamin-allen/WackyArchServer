@page "/alpha"
<h3>AlphaArchitecture</h3>

<CodeBox Cpu="Cpu" @ref="codeBox"></CodeBox>

<CPUInfo Cpu="Cpu" LoadButtonPressed="LoadProgram" ResetButtonPressed="Reset" StepButtonPressed="Step" RunButtonPressed="Run"></CPUInfo>

<FilledPort Port="Top"></FilledPort>
<FilledPort Port="Bottom"></FilledPort>
<ExpectationPort Port="Output"></ExpectationPort>

@code {
    public InterpreterCPU Cpu { get; set; }
    public WackyArch.Components.FilledPort Top { get; set; }
    public WackyArch.Components.FilledPort Bottom { get; set; }
    public WackyArch.Components.ExpectationPort Output { get; set; }
    private List<ICyclable> cyclables;

    private WackyArchServer.UIComponents.CodeBox codeBox;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Top = new WackyArch.Components.FilledPort(new int[] { 1, 2, 3, 4, 5, 6 }.Select(x => new Word() { Value = x }).ToList(), new Pipe(), "TOP");
        Bottom = new WackyArch.Components.FilledPort(new int[] { 9, 8, 7, 6, 5, 10 }.Select(x => new Word() { Value = x }).ToList(), new Pipe(), "BOTTOM");
        Output = new WackyArch.Components.ExpectationPort(new int[] { 0, 0, 0, 0, 0, 1 }.Select(x => new Word() { Value = x }).ToList(), "OUTPUT");

        Cpu = new InterpreterCPU(new Port[] { Top, Bottom, Output });

        cyclables = new List<ICyclable> { Cpu, Top, Bottom, Output };
    }

    private void LoadProgram()
    {
        var codeText = codeBox.CodeText;
        if (string.IsNullOrWhiteSpace(codeText)) return;

        try
        {
            Reset();
            codeBox.SetInfoMessage("");
            Cpu.Load(codeBox.CodeText);
            codeBox.SetInfoMessage("Program Loaded");
        }
        catch (AssemblerException ae)
        {
            codeBox.SetInfoMessage(ae.ShortMessage);
        }
    }

    private void Reset()
    {
        cyclables.ForEach(c => c.Reset());
        codeBox.SetInfoMessage("System Reset");
    }

    private void Step()
    {
        try
        {
            codeBox.SetInfoMessage("");
            cyclables.ForEach(c => c.Cycle());
            if (Cpu.IsHalted)
            {
                codeBox.SetInfoMessage("Program Complete");
            }
            else if (Output.ExpectedData.Count == 0)
            {
                codeBox.SetInfoMessage("Tests passed!");
            }
            else
            {
                codeBox.SetInfoMessage("Waiting for output...");
            }
        }
        catch (ComponentException cex)
        {
            codeBox.SetInfoMessage(cex.ShortMessage);
            Cpu.IsErrored = true;
        }
    }

    private async void Run(object state)
    {
        do
        {
            Step();
            StateHasChanged();
            await Task.Delay(1);
        } while (Cpu.IsHalted == false && Cpu.IsErrored == false);
    }
}
