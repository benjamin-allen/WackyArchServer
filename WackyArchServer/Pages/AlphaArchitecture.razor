@page "/alpha/{ChallengeIdString}"
@using WackyArchServer.Model

<h3>AlphaArchitecture</h3>

<div id="description">@Description</div>

<CodeBox Cpu="Cpu" @ref="codeBox"></CodeBox>

<CPUInfo Cpu="Cpu" LoadButtonPressed="LoadProgram" ResetButtonPressed="Reset" StepButtonPressed="Step" RunButtonPressed="Run" SubmitButtonPressed="Submit" @ref="cpuInfo"></CPUInfo>
@foreach (var port in InputPorts)
{
    <FilledPort Port="port"></FilledPort>
}
@foreach (var port in OutputPorts)
{
    <ExpectationPort Port="port"></ExpectationPort>
}

@code {
    [Parameter]
    public string ChallengeIdString { get; set; }

    public Guid ChallengeId { get; set; }

    private InterpreterCPU Cpu { get; set; }
    private List<WackyArch.Components.FilledPort> InputPorts { get; set; }
    private List<WackyArch.Components.ExpectationPort> OutputPorts { get; set; }
    private List<ICyclable> cyclables;

    private WackyArchServer.UIComponents.CodeBox codeBox;
    private WackyArchServer.UIComponents.CPUInfo cpuInfo;
    public string Description;

    [Inject]
    private AlphaChallengeService alphaChallengeService { get; set; }
    private AlphaChallenge alphaChallenge { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Guid challengeId;
        if (!Guid.TryParse(ChallengeIdString, out challengeId))
        {
            // Do something. Empty Arch so they have a sandbox?
        }
        ChallengeId = challengeId;

        alphaChallenge = alphaChallengeService.GetAlphaChallenge(ChallengeId);

        InputPorts = alphaChallengeService.GetInputPorts(alphaChallenge.InputTextJson);
        OutputPorts = alphaChallengeService.GetOutputPorts(alphaChallenge.OutputTextJson);
        var ports = new List<Port>(InputPorts);
        ports.AddRange(OutputPorts);
        Cpu = new InterpreterCPU(ports.ToArray());
        cyclables = new List<ICyclable> { Cpu };
        cyclables.AddRange(ports);

        Description = alphaChallenge.Description;
    }

    private async Task LoadProgram()
    {
        var codeText = await codeBox.GetText();
        if (string.IsNullOrWhiteSpace(codeText)) return;
        cpuInfo.DisableSubmitButton(true);

        try
        {
            Reset();
            codeBox.SetInfoMessage("");
            Cpu.Load(codeText);
            codeBox.SetInfoMessage("Program Loaded");
            await codeBox.SetLinePointer(Cpu.PcLineMap[0] + 1, false);
        }
        catch (AssemblerException ae)
        {
            codeBox.SetInfoMessage(ae.Message);
            await codeBox.SetLinePointer(ae.LineNumber + 1, true);
        }

        StateHasChanged();
    }

    private async void Reset()
    {
        cyclables.ForEach(c => c.Reset());
        codeBox.SetInfoMessage("System Reset");
        StateHasChanged();
    }

    private async Task Step()
    {
        try
        {
            codeBox.SetInfoMessage("");
            cyclables.ForEach(c => c.Cycle());
            if (OutputPorts.All(o => o.ExpectedData.Count == 0))
            {
                codeBox.SetInfoMessage("Tests passed!");
                cpuInfo.DisableSubmitButton(false);
            }
            else if (Cpu.IsHalted)
            {
                codeBox.SetInfoMessage("Program Complete");
            }
            else
            {
                codeBox.SetInfoMessage("Waiting for output...");
            }
        }
        catch (ComponentException cex)
        {
            codeBox.SetInfoMessage(cex.ShortMessage);
            Cpu.IsErrored = true;
        }
        finally
        {
            var isInLineMap = Cpu.PcLineMap.TryGetValue(Cpu.GetPCValue(), out int currentLine);
            await codeBox.SetLinePointer(isInLineMap ? currentLine+1 : 0, Cpu.IsErrored);
            StateHasChanged();
        }
    }

    private async Task Run(object state)
    {
        do
        {
            await Step();
            StateHasChanged();
            await Task.Delay(1);
        } while (Cpu.IsHalted == false && Cpu.IsErrored == false);
    }

    private async Task Submit()
    {
        codeBox.SetInfoMessage("Submitted...");
        StateHasChanged();

        var codeText = await codeBox.GetText();
        await Task.Delay(1000);
        var result = await alphaChallengeService.RunAlphaChallengeTests(ChallengeId, codeText, new Account { Username = "DEBUG", Id = Guid.NewGuid(), Passwordhash = ""});
        codeBox.SetInfoMessage(result);
        StateHasChanged();
    }
}
