@page "/alpha/{ChallengeIdString}"
@using WackyArchServer.Model

<h3>AlphaArchitecture</h3>

<div id="description">@Description</div>

<CodeBox Cpu="Cpu" @ref="codeBox"></CodeBox>

<CPUInfo Cpu="Cpu" LoadButtonPressed="LoadProgram" ResetButtonPressed="Reset" StepButtonPressed="Step" RunButtonPressed="Run" SubmitButtonPressed="Submit"></CPUInfo>
@foreach (var port in InputPorts)
{
    <FilledPort Port="port"></FilledPort>
}
@foreach (var port in OutputPorts)
{
    <ExpectationPort Port="port"></ExpectationPort>
}

@code {
    [Parameter]
    public string ChallengeIdString { get; set; }

    public Guid ChallengeId { get; set; }

    public InterpreterCPU Cpu { get; set; }
    public List<WackyArch.Components.FilledPort> InputPorts { get; set; }
    public List<WackyArch.Components.ExpectationPort> OutputPorts { get; set; }
    private List<ICyclable> cyclables;

    private WackyArchServer.UIComponents.CodeBox codeBox;
    public string Description;

    [Inject]
    private AlphaChallengeService alphaChallengeService { get; set; }
    private AlphaChallenge alphaChallenge { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Guid challengeId;
        if (!Guid.TryParse(ChallengeIdString, out challengeId))
        {
            // Do something. Empty Arch?
        }
        ChallengeId = challengeId;

        alphaChallenge = await alphaChallengeService.GetAlphaChallengeAsync(ChallengeId);

        InputPorts = alphaChallengeService.GetInputPorts(alphaChallenge.InputTextJson);
        OutputPorts = alphaChallengeService.GetOutputPorts(alphaChallenge.OutputTextJson);
        var ports = new List<Port>(InputPorts);
        ports.AddRange(OutputPorts);
        Cpu = new InterpreterCPU(ports.ToArray());
        cyclables = new List<ICyclable>(InputPorts);
        cyclables.AddRange(OutputPorts);
        cyclables.Add(Cpu);

        Description = alphaChallenge.Description;
    }

    private void LoadProgram()
    {
        var codeText = codeBox.CodeText;
        if (string.IsNullOrWhiteSpace(codeText)) return;

        try
        {
            Reset();
            codeBox.SetInfoMessage("");
            Cpu.Load(codeBox.CodeText);
            codeBox.SetInfoMessage("Program Loaded");
        }
        catch (AssemblerException ae)
        {
            codeBox.SetInfoMessage(ae.ShortMessage);
        }
    }

    private void Reset()
    {
        cyclables.ForEach(c => c.Reset());
        codeBox.SetInfoMessage("System Reset");
    }

    private void Step()
    {
        try
        {
            codeBox.SetInfoMessage("");
            cyclables.ForEach(c => c.Cycle());
            if (Cpu.IsHalted)
            {
                codeBox.SetInfoMessage("Program Complete");
            }
            else if (OutputPorts.All(o => o.ExpectedData.Count == 0))
            {
                codeBox.SetInfoMessage("Tests passed!");
            }
            else
            {
                codeBox.SetInfoMessage("Waiting for output...");
            }
        }
        catch (ComponentException cex)
        {
            codeBox.SetInfoMessage(cex.ShortMessage);
            Cpu.IsErrored = true;
        }
    }

    private async void Run(object state)
    {
        do
        {
            Step();
            StateHasChanged();
            await Task.Delay(1);
        } while (Cpu.IsHalted == false && Cpu.IsErrored == false);
    }

    private async Task Submit()
    {
        var result = await alphaChallengeService.RunAlphaChallengeTests(ChallengeId, codeBox.CodeText, new Account { Username = "DEBUG", Id = Guid.NewGuid(), Passwordhash = ""});
        Description = result;
    }
}
