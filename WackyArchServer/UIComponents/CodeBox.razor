<div class="codebox-container">
    <textarea id="codeBox" rows="@rows" cols="@cols"
        @oninput="setCodeText"
        @onchange="testAssemble"
        @onkeydown="checkKey"></textarea>
</div>
<div class="codebox-info" >
    <p>@infoMessage</p>
</div>


@code {
    [Parameter]
    public int rows { get; set; } = 30;
    [Parameter]
    public int cols { get; set; } = 18;
    private int minRows { get; set; } = 4;
    private int minCols { get; set; } = 18;

    [Parameter, EditorRequired]
    public CPU Cpu { get; set; }

    public string CodeText { get; set; }

    private string infoMessage { get; set; }

    protected override void OnInitialized()
    {
        rows = Math.Min(rows, minRows);
        cols = Math.Min(cols, minCols);
    }

    /// <summary>
    /// Attempt to assemble the code in the inputbox. If there's an error, 
    /// mark the line number and error string.
    /// </summary>
    /// <param name="args"></param>
    public void testAssemble(ChangeEventArgs args)
    {
        try
        {
            Assembler.Assemble(Cpu, (string)args.Value, out _);
            infoMessage = "";
        }
        catch (AssemblerException e)
        {
            infoMessage = $"[Line {e.LineNumber}] {e.ShortMessage}";
        }
    }

    private void setCodeText(ChangeEventArgs args)
    {
        CodeText = (string)args.Value;
    }

    private void checkKey(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" || args.Key == "NumpadEnter")
        {
            testAssemble(new ChangeEventArgs { Value = CodeText });
        }
    }

    public void UpdateLinePointer(int line)
    {
        Console.WriteLine($"Highlight line {line}");
    }

    public void SetInfoMessage(string infoMessage)
    {
        this.infoMessage = infoMessage;
    }
}
