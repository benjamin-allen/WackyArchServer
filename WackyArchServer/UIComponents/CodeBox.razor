@inject IJSRuntime JS

<div id="codebox-container">
    <div id="codebox-info" >
        <p>@infoMessage</p>
    </div>
    <div id="ace-editor"></div>
</div>


@code {
    [Parameter]
    public bool Disabled { get; set; } = false;

    private string infoMessage { get; set; } = "";


    #region Ace Interop
    private IJSObjectReference module { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./UIComponents/CodeBox.razor.js");
            await module.InvokeVoidAsync("setup");
            if (Disabled)
            {
                await module.InvokeVoidAsync("disable");
            }
        }
    }

    public async Task<string> GetText()
    {
        return await module.InvokeAsync<string>("getText");
    }

    public async Task SetText(string text)
    {
        await module.InvokeVoidAsync("setText", text);
    }

    /// <summary>
    /// Highlights the input line, and highlights it red if isError is set.
    /// line = 0 will clear all highlights.
    /// </summary>
    public async Task SetLinePointer(int line, bool isError)
    {
        await module.InvokeVoidAsync("setLinePointer", line, isError);
    }
    #endregion


    public void SetInfoMessage(string infoMessage)
    {
        this.infoMessage = infoMessage;
    }
}
