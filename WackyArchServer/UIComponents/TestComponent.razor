@page "/test"
@using System.Reflection
@using System.ComponentModel.DataAnnotations

<PageTitle>Component Tester</PageTitle>

<h3>Select a component to test</h3>

<EditForm EditContext="@editContext" OnValidSubmit="@handleValidSubmit">
    <InputSelect @bind-Value="selectedComponent">
        @foreach(Type c in components)
        {
            <option value="@c.FullName">@c.Name</option>
        }
    </InputSelect>
    <button type="submit">Submit</button>
</EditForm>

<hr />
<DynamicComponent Type="@selectedComponentType" Parameters="@parameters"></DynamicComponent>

@code {
    private EditContext editContext;
    private string selectedComponent;
    private List<Type> components;
    private Type selectedComponentType;
    private Dictionary<string, object> parameters;

    protected override void OnInitialized()
    {
        components = Assembly.GetExecutingAssembly().GetTypes()
            .Where(t => t.Namespace == "WackyArchServer.UIComponents")
            .Where(t => t.FullName != this.GetType().FullName)
            .Where(t => typeof(IComponent).IsAssignableFrom(t))
            .ToList();
        selectedComponent = components.First().FullName;
        handleValidSubmit();
        editContext = new EditContext(selectedComponent);
        cpu.SetPCValue(1);

        stack.Words[0] = new Word { Value = 0 };
        stack.Words[1] = new Word { Value = 1 };
        stack.Words[2] = new Word { Value = 2 };
        stack.Words[3] = new Word { Value = 3 };
    }

    private void handleValidSubmit()
    {
        selectedComponentType = Type.GetType(selectedComponent);
        parametersCollection.TryGetValue(selectedComponentType, out parameters);
        if (parameters == null)
        {
            parameters = new Dictionary<string, object>();
        }
    }


    #region Testing Data
    private static CPU cpu = new CPU();
    private static Memory memory = new Memory(512);
    private static Stack stack = new Stack();
    private Dictionary<Type, Dictionary<string, object>> parametersCollection = new Dictionary<Type, Dictionary<string, object>>
    {
        { typeof(CodeBox), new Dictionary<string, object> { { "Disabled", true } } },
        { typeof(CPUInfo), new Dictionary<string, object> { { "Cpu", cpu } } },
        { typeof(FilledPort), new Dictionary<string, object> { { "Port", new WackyArch.Components.FilledPort(Enumerable.Range(0, 30).Select(x => new Word { Value = x}).ToList(), new Pipe(), "Test") } } },
        { typeof(ExpectationPort), new Dictionary<string, object> { { "Port", new WackyArch.Components.ExpectationPort(Enumerable.Range(0, 30).Select(x => new Word { Value = x }).ToList(), "Test") } } },
        { typeof(MemoryView), new Dictionary<string, object> { { "Memory", memory }, { "Cpu", cpu } } },
        { typeof(StackView), new Dictionary<string, object> { { "Stack", stack } } }
    };
    #endregion
}
